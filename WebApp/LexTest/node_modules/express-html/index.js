'use strict';

function ExpressHTML() {
    const me = this;

    me._app = null;
    me._call = callback.bind(me);
    me._list = [];
    me._map = {};
    me._root = null;
}

function callback(req, res) {
    const fs = require('fs');
    const etag = createEtag(req.originalUrl);

    let path = req.originalUrl.replace(/[?#].*$/, '').slice(1);

    /**
     * accessible file white list
     */
    path = this._map[path];

    if (!path) {
        render404(res, etag);
        return;
    }

    const mime = require('mime');
    const type = mime.lookup(path.replace(/^.*\./, ''), 'application/octet-stream');

    if (req.header('If-None-Match') === etag) {
        res.status(304);
        res.header('Etag', etag);
        res.header('Content-Type', type);
        res.end();
        return;
    }

    path = this._root + '/' + path;

    fs.readFile(path, (err, data) => {
        if (err) {
            render404(res, etag);
            return;
        }

        res.status(200);
        res.header('Etag', etag);
        res.header('Content-Type', type);
        res.header('Cache-Control', 'public, max-age=86400');
        res.send(data);
    });
}

function createEtag(url) {
    return new Buffer(url).toString('base64');
}

function render404(res, etag) {
    res.status(404);
    res.header('Etag', etag);
    res.end();
}

ExpressHTML.prototype = {
    /**
     * add html file path / file list / file path map
     * @param {Array|Object|String} path
     */
    add: function (path) {
        const me = this;

        if (Array.isArray(path)) {
            me._list = me._list.concat(path);
        } else {
            me._list.push(path);
        }

        if (me._app) {
            me._use();
        }

        return me;
    },
    /**
     * mount app
     * @param {Object} app express() app instance
     * @param {String} root html file root dir
     */
    use: function (app, root) {
        const me = this;

        me._app = app;
        me._root = root;
        me._use();

        return me;
    },
    _use: function () {
        const me = this;

        const app = me._app;
        const call = me._call;
        const list = me._list;
        const map = me._map;

        let item, path, type;

        while (list.length) {
            item = list.shift();
            type = typeof item;
            if (type === 'string') {
                map[item] = item;
                path = '/' + item;
                app.get(path, call);
                app.head(path, call);
            } else if (type === 'object') {
                for (path in item) if (item.hasOwnProperty(path)) {
                    map[path] = item[path];
                    path = '/' + path;
                    app.get(path, call);
                    app.head(path, call);
                }
            }
        }
    }
};

module.exports = new ExpressHTML;